<?xml version="1.0"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
               creationComplete="onCreationComplete(event)"
               implements="ru.rknrl.castles.rmi.IAdminAuthFacade, ru.rknrl.castles.rmi.IAdminFacade">

    <s:Group id="authGroup" width="100%" height="100%">
        <s:Form horizontalCenter="0" verticalCenter="0">
            <s:FormItem label="Login:">
                <s:TextInput id="loginTextInput" width="300"/>
            </s:FormItem>
            <s:FormItem label="Password:">
                <s:TextInput id="passwordTextInput" width="300"/>
            </s:FormItem>
            <s:FormItem>
                <s:Button label="Connect" click="onConnectClick(event)"/>
            </s:FormItem>
        </s:Form>
    </s:Group>

    <s:Group id="loadingGroup" width="100%" height="100%"
             includeInLayout="false" visible="false">
        <s:Label text="Loading" horizontalCenter="0" verticalCenter="0"/>
    </s:Group>

    <s:VGroup id="adminGroup" width="100%" height="100%"
              includeInLayout="false" visible="false">
        <s:HGroup>
            <s:DropDownList id="accountTypeComboBox"
                            dataProvider="{Utils.accountTypes}"
                            labelFunction="{Utils.enumLabelFunction}"
                            selectedIndex="1"/>

            <s:TextInput id="accountIdInput"/>

            <s:Button label="Get" click="onGetClick(event)"/>
        </s:HGroup>

        <s:Spacer height="50"/>

        <s:VGroup id="stateHolder"/>

    </s:VGroup>

    <fx:Script><![CDATA[
        import mx.controls.Alert;
        import mx.events.FlexEvent;

        import ru.rknrl.castles.events.AddBalanceEvent;
        import ru.rknrl.castles.events.AddMagicItemEvent;
        import ru.rknrl.castles.events.SetSkillEvent;
        import ru.rknrl.castles.events.SetSlotEvent;
        import ru.rknrl.castles.rmi.AdminAuthFacadeReceiver;
        import ru.rknrl.castles.rmi.AdminAuthFacadeSender;
        import ru.rknrl.castles.rmi.AdminFacadeReceiver;
        import ru.rknrl.castles.rmi.AdminFacadeSender;
        import ru.rknrl.core.rmi.Connection;
        import ru.rknrl.dto.AccountIdDTO;
        import ru.rknrl.dto.AccountStateDTO;
        import ru.rknrl.dto.AdminAccountStateDTO;
        import ru.rknrl.dto.AdminAddGoldDTO;
        import ru.rknrl.dto.AdminAddItemDTO;
        import ru.rknrl.dto.AdminAuthenticateDTO;
        import ru.rknrl.dto.AdminGetAccountStateDTO;
        import ru.rknrl.dto.AdminSetSkillDTO;
        import ru.rknrl.dto.AdminSetSlotDTO;
        import ru.rknrl.dto.ItemDTO;
        import ru.rknrl.dto.SkillLevelDTO;
        import ru.rknrl.dto.SlotDTO;

        private static const host:String = "127.0.0.1";
        private static const port:int = 2337;
        private static const policyPort:int = 2336;

        private var connection:Connection;

        private var authFacadeSender:AdminAuthFacadeSender;
        private var authFacadeReceiver:AdminAuthFacadeReceiver;

        private var adminFacadeSender:AdminFacadeSender;
        private var adminFacadeReceiver:AdminFacadeReceiver;

        private function onCreationComplete(event:FlexEvent):void {
            stateHolder.addEventListener(AddBalanceEvent.ADD_BALANCE, onAddBalance);
            stateHolder.addEventListener(AddMagicItemEvent.ADD_MAGIC_ITEM, onAddMagicItem);
            stateHolder.addEventListener(SetSkillEvent.SET_SKILL, onSetSkill);
            stateHolder.addEventListener(SetSlotEvent.SET_SLOT, onSetSlot);
        }

        private function onConnectClick(event:MouseEvent):void {
            authGroup.includeInLayout = authGroup.visible = false;
            loadingGroup.includeInLayout = loadingGroup.visible = true;
            createConnection(host, port);
        }

        private function createConnection(host:String, port:int):void {
            if (connection) throw new Error("already connected");

            Security.loadPolicyFile("xmlsocket://" + host + ":" + policyPort);

            connection = new Connection(new Socket());
            connection.addEventListener(Event.CONNECT, onConnect);
            connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onConnectionError);
            connection.addEventListener(IOErrorEvent.IO_ERROR, onConnectionError);
            connection.addEventListener(Event.CLOSE, onConnectionError);
            connection.connect(host, port);
        }

        private function onConnectionError(event:Event):void {
            Alert.show(event.toString());
        }

        private function onConnect(event:Event):void {
            authFacadeReceiver = new AdminAuthFacadeReceiver(this);
            connection.registerReceiver(authFacadeReceiver);

            authFacadeSender = new AdminAuthFacadeSender(connection);

            loadingGroup.includeInLayout = loadingGroup.visible = false;
            adminGroup.includeInLayout = adminGroup.visible = true;
        }

        public function onAdminAuthReady():void {
            const authenticate:AdminAuthenticateDTO = new AdminAuthenticateDTO();
            authenticate.login = loginTextInput.text;
            authenticate.password = passwordTextInput.text;
            authFacadeSender.authenticateAsAdmin(authenticate);
        }

        public function onAuthenticatedAsAdmin():void {
            connection.unregisterReceiver(authFacadeReceiver);

            adminFacadeReceiver = new AdminFacadeReceiver(this);
            connection.registerReceiver(adminFacadeReceiver);

            adminFacadeSender = new AdminFacadeSender(connection);
        }

        private function onGetClick(event:MouseEvent):void {
            stateHolder.removeAllElements();

            const dto:AdminGetAccountStateDTO = new AdminGetAccountStateDTO();
            dto.accountId = new AccountIdDTO();
            dto.accountId.id = accountIdInput.text;
            dto.accountId.type = accountTypeComboBox.selectedItem;
            adminFacadeSender.getAccountState(dto);
        }

        private var currentAccountId:AccountIdDTO;

        public function onAccountState(dto:AdminAccountStateDTO):void {
            stateHolder.removeAllElements();

            const state:AccountStateDTO = dto.accountState;

            currentAccountId = dto.accountId;

            const nameRow:NameRow = new NameRow();
            nameRow.init(currentAccountId);
            stateHolder.addElement(nameRow);

            stateHolder.addElement(spacer);

            const goldRow:BalanceRow = new BalanceRow();
            goldRow.init(state.gold);
            stateHolder.addElement(goldRow);

            stateHolder.addElement(spacer);

            for each(var slot:SlotDTO in state.startLocation.slots) {
                const slotRow:SlotRow = new SlotRow();
                slotRow.init(slot.id, slot.buildingPrototype);
                stateHolder.addElement(slotRow);
            }

            stateHolder.addElement(spacer);

            for each(var skill:SkillLevelDTO in state.skills.levels) {
                const skillRow:SkillRow = new SkillRow();
                skillRow.init(skill.type, skill.level);
                stateHolder.addElement(skillRow);
            }

            stateHolder.addElement(spacer);

            for each(var item:ItemDTO in state.items.items) {
                const magicItemRow:MagicItemRow = new MagicItemRow();
                magicItemRow.init(item.type, item.count);
                stateHolder.addElement(magicItemRow);
            }
        }

        private static function get spacer():Spacer {
            const spacer:Spacer = new Spacer();
            spacer.height = 16;
            return spacer;
        }

        private function onAddBalance(event:AddBalanceEvent):void {
            const dto:AdminAddGoldDTO = new AdminAddGoldDTO();
            dto.accountId = currentAccountId;
            dto.amount = event.amount;
            adminFacadeSender.addGold(dto)
        }

        private function onAddMagicItem(event:AddMagicItemEvent):void {
            const dto:AdminAddItemDTO = new AdminAddItemDTO();
            dto.accountId = currentAccountId;
            dto.itemType = event.itemType;
            dto.amount = event.amount;
            adminFacadeSender.addItem(dto)
        }

        private function onSetSlot(event:SetSlotEvent):void {
            const dto:AdminSetSlotDTO = new AdminSetSlotDTO();
            dto.accountId = currentAccountId;
            dto.slot = event.slotDto;
            adminFacadeSender.setSlot(dto)
        }

        private function onSetSkill(event:SetSkillEvent):void {
            const dto:AdminSetSkillDTO = new AdminSetSkillDTO();
            dto.accountId = currentAccountId;
            dto.skilType = event.skillType;
            dto.skillLevel = event.skillLevel;
            adminFacadeSender.setSkill(dto)
        }
        ]]></fx:Script>
</s:Application>
