package protos;

option optimize_for = SPEED;

import "options.proto";
import "common.proto";

enum CellSize {
    SIZE = 39;
}

message BuildingId {
    required int32 id = 1;
}

message UnitId {
    required int32 id = 1;
}

message PlayerId {
    required int32 id = 1;
}

message Player {
    required PlayerId id = 1;
    required UserInfo info = 2;
}

message PointDTO {
    required float x = 1;
    required float y = 2;
}

// server -> client

message EnteredGame {
    option (msgid) = 21;

    required NodeLocator node = 1;
}

message LeavedGame {
    option (msgid) = 31;
}

message GameState {
    option (msgid) = 30;

    required int32 width = 1;
    required int32 height = 2;
    repeated Player players = 3;
    repeated SlotsPos slots = 4;
    required PlayerId selfId = 5;
    repeated BuildingDTO buildings = 6;
    repeated UnitDTO units = 7;
    repeated Fireball fireballs = 8;
    repeated Tornado tornadoes = 9;
    repeated Volcano volcanoes = 10;
    repeated Bullet bullets = 11;
    required ItemStatesDTO itemStates = 12;
    repeated GameOver gameOvers = 13;
}

message GameStateUpdate {
    option (msgid) = 40;

    repeated BuildingUpdate buildingUpdates = 1;
    repeated UnitDTO newUnits = 2;
    repeated UnitUpdate unitUpdates = 3;
    repeated UnitId killUnits = 4;
    repeated Fireball newFireballs = 5;
    repeated Tornado newTornadoes = 6;
    repeated Volcano newVolcanoes = 7;
    repeated Bullet newBullets = 8;
    repeated ItemStatesDTO itemStatesUpdates = 9;
}

enum SlotsOrientation {
    TOP_LEFT = 1;
    TOP_RIGHT = 2;
    BOTTOM_LEFT = 3;
    BOTTOM_RIGHT = 4;
}

message SlotsPos {
    required PlayerId playerId = 1;
    required PointDTO pos = 2;
    required SlotsOrientation orientation = 3;
}

message BuildingDTO {
    required BuildingId id = 1;
    required BuildingPrototype building = 2;
    required PointDTO pos = 3;
    required int32 population = 4;
    optional PlayerId owner = 5;
    required bool strengthened = 6;
}

message BuildingUpdate {
    required BuildingId id = 1;
    required int32 population = 2;
    optional PlayerId owner = 3;
    required bool strengthened = 4;
}

message UnitDTO {
    required UnitId id = 1;
    required BuildingType buildingType = 2;
    required int32 count = 3;
    required PointDTO pos = 4;
    required int32 duration = 5;
    required BuildingId targetBuildingId = 6;
    required PlayerId owner = 7;
    required bool strengthened = 8;
}

message UnitUpdate {
    required UnitId id = 1;
    required int32 count = 4;
}

message Fireball {
    required PointDTO pos = 1;
    required int32 millisTillSplash = 2;
}

message Volcano {
    required PointDTO pos = 1;
    required int32 millisTillEnd = 2;
}

message Tornado {
    repeated PointDTO points = 1;
    required int32 millisFromStart = 3;
    required int32 millisTillEnd = 4;
}

message Bullet {
    required BuildingId buildingId = 1;
    required UnitId unitId = 2;
    required int32 duration = 3;
}

message GameOver {
    option (msgid) = 41;

    required PlayerId playerId = 1;
    required int32 place = 3;
    required int32 reward = 4;
}

message ItemStatesDTO {
    required PlayerId playerId = 1;
    repeated ItemStateDTO items = 2;
}

message ItemStateDTO {
    required ItemType itemType = 1;
    required int32 count = 2;
    required int32 millisFromStart = 3;
    required int32 cooldownDuration = 4; // todo можно не посылать каждый раз
}

// client -> server

message JoinGame {
    option (msgid) = 95;
}

message Surrender {
    option (msgid) = 96;
}

message LeaveGame {
    option (msgid) = 97;
}

message Move {
    option (msgid) = 100;

    repeated BuildingId fromBuildings = 1;
    required BuildingId toBuilding = 2;
}

message CastFireball {
    option (msgid) = 101;

    required PointDTO points = 1;
}

message CastStrengthening {
    option (msgid) = 102;

    required BuildingId buildingId = 1;
}

message CastVolcano {
    option (msgid) = 103;

    required PointDTO points = 1;
}

message CastTornado {
    option (msgid) = 104;

    repeated PointDTO points = 1;
}

message CastAssistance {
    option (msgid) = 105;

    required BuildingId buildingId = 1;
}